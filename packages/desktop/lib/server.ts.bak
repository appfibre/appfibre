import * as _fastify from 'fastify';
import * as fastifyStatic from 'fastify-static';
import { Services } from '@appfibre/core'
import types from '@appfibre/types';
import { NotFound } from 'http-errors';
import * as fs from 'fs';
import * as path from 'path';

let jst = new Services.Transformer({module: types.app.ModuleSystem.Raw, compact: true, parsers: {".html": html} })


function html (jst:any, transformer:types.app.ITransformer, tc:types.app.ITransformContext, context:types.app.ITransformProcessingContext): types.app.IProcessOutput
{ 

  function formatHtmlAttributeValue(jst: any)
  {
      switch (typeof jst)
      {
          case 'string':
              return jst;
          case 'boolean':
              return jst.toString();
          case 'object':
              return Object.keys(jst).map(k => k + ': ' + jst[k]).join('; ');
          default:
              throw new Error("Unsupported attribute type");
      }
  }

  function processHtmlAttributes(this:types.app.ITransformProcessingContext, jst:any)
  {
      if (typeof jst == 'object')
          return Object.keys(jst).map(k => k + '="' + formatHtmlAttributeValue(jst[k]) + '"').join(' ')
      else if (jst)
          throw new Error("Unexpected attributes tag (must be of type object). Received: " + JSON.stringify(jst))
      else return '';
  }

  function processHtml(this:types.app.ITransformProcessingContext, jst:any) : types.app.IProcessOutput
  {
      if (jst === null || typeof jst === 'string' || this.format == "html" || this.format == "xml")
          return { format: "html", output: jst }

      if (this.depth % 2 == 1)// Array of ...
      {
          if (Array.isArray(jst)) {
              //console.log({format: "html", output: jst.map(e => processHtml.call({depth: this.depth+1, format: this.format/*, indent: this.indent*/ }, e).output).join('\n')});
              return {format: "html", output: jst.map(e => processHtml.call({depth: this.depth+1, format: this.format/*, indent: this.indent*/ }, e).output).join('\n')};
          }
          else
              throw new Error("Unexpected html element - Expected array of elements: received: " + JSON.stringify(jst))
      } 
      else if (Array.isArray(jst))
      {
          let innerHtml = jst[2] ? processHtml.call({ format: this.format, depth: this.depth+1/*, indent: this.indent*/ }, jst[2]) : null;
          //console.log({ format: "xml", output: new Array(this.depth*4/*this.indent*/).join(' ') + "<" + jst[0] + ' ' + processHtmlAttributes.call(this, jst[1]) + (innerHtml && innerHtml.output ? ">" + innerHtml.output + "</" + jst[0] + ">" : " />\n" ) });
          return { format: "xml", output: new Array(this.depth*4/*this.indent*/).join(' ') + "<" + jst[0] + ' ' + processHtmlAttributes.call(this, jst[1]) + (innerHtml && innerHtml.output ? ">" + innerHtml.output + "</" + jst[0] + ">" : " />\n" ) };
      } 
      else
          throw new Error("Unexpected html element.  Content element must either be a string or Array[3]. Received: " + JSON.stringify(jst));
  }

  let output = processHtml.call({format:"json", depth: 0}, jst[".html"]);
  //console.log({"final": output})
  return output;  
  
}



const fastify = _fastify({ logger: true });

// let result = jst.transform(source);
fastify.get('/*', async (request, reply) => {

    if (request.req.url) {
        let qs = request.req.url.indexOf('?') > -1 ? request.req.url.substr(request.req.url.indexOf('?')) : '';
        let name = request.req.url.substr(1, request.req.url.length - qs.length - 1);
        if (fs.existsSync(name)) {
            //return { exists: path.extname(name) };
            //reply.send( fs.readFileSync(name). );
            
            //reply.type("json");
            //reply.send(fs.readFileSync(name));

            let result = jst.transform(fs.readFileSync(name).toString(), name);
            reply.type(result.format);
            reply.send(result.output);
            

        }
    } 
    throw new NotFound();
})
export { fastify }


/*
// Run the server!
const start = async () => {
    try {
      await fastify.listen(0);
      var address = fastify.server.address();
      if (typeof address != 'string') port = address.port;
      //fastify.log.info(`server listening on ${address}`)
    } catch (err) {
      fastify.log.error(err)
      process.exit(1)
    }
  }
  */