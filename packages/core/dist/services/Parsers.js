"use strict";
exports.__esModule = true;
exports.Parsers = void 0;
exports.Parsers = {
    ".": function (obj, _transformer, _tc, _context) { return { format: "json", output: obj["."] }; },
    ".import": function (obj, transformer, tc, context) { return { format: "json", output: transformer.loadModule(tc, transformer.process(obj[".import"], tc, { esc: false, et: false, depth: context.depth, format: "json" }).output, context.depth) }; },
    ".function": function (obj, transformer, tc, context) { return { format: "json", output: "function " + (obj[".function"] ? obj[".function"] : "") + "(" + (obj["arguments"] ? transformer.process(obj["arguments"], tc, { esc: false, et: true, depth: context.depth, format: "json" }).output : "") + "){ return " + transformer.process(obj["return"], tc, { esc: true, et: false, depth: context.depth, format: "json" }).output + " }" }; },
    ".map": function (obj, transformer, tc, context) { return { format: "json", output: transformer.process(obj[".map"], tc, { esc: false, et: false, depth: context.depth, format: "json" }).output + ".map(function(" + obj["arguments"] + ") {return " + (transformer.settings && transformer.settings.indent ? new Array(context.depth).join(' ') : "") + transformer.process(obj["return"], tc, { esc: true, et: false, depth: context.depth, format: "json" }).output + " })" }; },
    ".filter": function (obj, transformer, tc, context) { return { format: "json", output: transformer.process(obj[".filter"], tc, { esc: false, et: false, depth: context.depth, format: "json" }).output + ".filter(function(" + obj["arguments"] + ") {return " + transformer.process(obj["condition"], tc, { esc: true, et: false, depth: context.depth, format: "json" }).output + " })" }; },
    ".call": function (obj, transformer, tc, context) { return { format: "json", output: transformer.process(obj[".call"], tc, { esc: false, et: false, depth: context.depth, format: "json" }).output + ".call(" + (obj["arguments"] ? transformer.process(obj["arguments"], tc, { esc: false, et: true, depth: context.depth, format: "json" }).output : "") + ")" }; },
    ".exec": function (obj, transformer, tc, context) { return { format: "json", output: transformer.process(obj[".exec"], tc, { esc: false, et: false, depth: context.depth, format: "json" }).output + "(" + (obj["arguments"] ? transformer.process(obj["arguments"], tc, { esc: true, et: true, depth: context.depth, format: "json" }).output : "") + ")" }; },
    ".new": function (obj, transformer, tc, context) { return { format: "json", output: "new " + transformer.process(obj[".new"], tc, { esc: false, et: false, depth: context.depth, format: "json" }).output + "(" + (obj["arguments"] ? transformer.process(obj["arguments"], tc, { esc: true, et: true, depth: context.depth, format: "json" }).output : "") + ")" }; }
};
